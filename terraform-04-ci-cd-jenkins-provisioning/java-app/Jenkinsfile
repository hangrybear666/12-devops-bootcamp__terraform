#!/user/bin/env groovy

library identifier: '12-devops-bootcamp__terraform.git@main', retriever: modernSCM(
    scm: [$class: 'GitSCMSource',
    credentialsId: 'git-creds',
    remote: 'https://github.com/hangrybear666/12-devops-bootcamp__terraform.git',
    traits: [gitBranchDiscovery()]],
    libraryPath: 'terraform-04-ci-cd-jenkins-provisioning/jenkins-shared-library/')

pipeline {
    agent any
    tools {
        maven 'Maven'
    }
    parameters {
        text(name: 'MY_IP_WHITELIST', defaultValue: '62.158.109.251/32', description: 'IP addresses allowed to SSH into ec2.')
        text(name: 'SSH_KEY_NAME', defaultValue: 'tf-ci-cd-test', description: 'Enter the name of your aws key pair to ssh into your ec2.')
    }
    environment {
        JENKINS_IP = "172.105.75.118"
        AWS_ECR_REPO_URL='010928217051.dkr.ecr.eu-central-1.amazonaws.com/k8s-imgs'
    }
    stages {

        stage('Increment Java App Version') {
            steps {
                dir("terraform-04-ci-cd-jenkins-provisioning/java-app") {
                    script {
                        echo 'incrementing app version...'
                        sh 'mvn build-helper:parse-version versions:set \
                            -DnewVersion=\\\${parsedVersion.majorVersion}.\\\${parsedVersion.minorVersion}.\\\${parsedVersion.nextIncrementalVersion} \
                            versions:commit'
                        def matcher = readFile('pom.xml') =~ '<version>(.+)</version>'
                        def version = matcher[0][1]
                        env.VERSION_NUM = "$version-$BUILD_NUMBER"
                    }
                }
            }
        }
        stage('Build Java App JAR') {
            steps {
                dir("terraform-04-ci-cd-jenkins-provisioning/java-app") {
                    script {
                        // using jenkins shared library groovy scripts in /jenkins-shared-library/vars
                        buildJar()
                    }
                }
            }
        }
        stage('Build & Push Java App Image to ECR') {
            environment {
                AWS_ACCESS_KEY_ID = credentials('aws_access_key_id')
                AWS_SECRET_ACCESS_KEY = credentials('aws_secret_access_key')
            }
            steps {
                dir("terraform-04-ci-cd-jenkins-provisioning/java-app") {
                    script {
                        sh """
                        aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}
                        aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}
                        aws configure set region eu-central-1
                        aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin ${env.AWS_ECR_REPO_URL}
                        docker build -t java-app-${env.VERSION_NUM} .
                        docker tag java-app-${env.VERSION_NUM} ${env.AWS_ECR_REPO_URL}:java-app-${env.VERSION_NUM}
                        docker push ${env.AWS_ECR_REPO_URL}:java-app-${env.VERSION_NUM}
                        """
                    }
                }
            }
        }
        stage('Provision AWS EC2') {
            environment {
                AWS_ACCESS_KEY_ID = credentials('aws_access_key_id')
                AWS_SECRET_ACCESS_KEY = credentials('aws_secret_access_key')
                TF_VAR_env_prefix = 'tf-jenkins'
                TF_VAR_my_ip = "${MY_IP_WHITELIST}"
                TF_VAR_jenkins_ip = "${JENKINS_IP}/32"
                TF_VAR_ssh_key_name = "${SSH_KEY_NAME}"
            }
            steps {
                dir('terraform-04-ci-cd-jenkins-provisioning') {
                    script {
                        echo 'Provisioning with Terraform...'
                        sh "terraform init"
                        sh "terraform apply --auto-approve"
                        EC2_PUBLIC_IP = sh(
                        script: "terraform output ec2-public_ip",
                        returnStdout: true
                        ).trim()
                    }
                }
            }
        }
        stage('Deploy to AWS EC2') {
            environment {
                AWS_ACCESS_KEY_ID = credentials('aws_access_key_id')
                AWS_SECRET_ACCESS_KEY = credentials('aws_secret_access_key')
                DOCKER_CREDS = credentials('docker-hub-repo')
            }
            steps {
                dir('terraform-04-ci-cd-jenkins-provisioning') {
                    script {
                        echo "waiting for EC2 server to initialize"
                        sleep(time: 60, unit: "SECONDS")
                        echo 'deploying ECR hosted docker image via bash payload script to EC2...'
                        def shellCmd = "bash ./ec2-run-ecr-image.sh ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY} ${env.AWS_ECR_REPO_URL} ${env.AWS_ECR_REPO_URL}:java-app-${env.VERSION_NUM}"
                        def ec2Instance = "ec2-user@${EC2_PUBLIC_IP}"
                        sshagent(['ssh-tf-ec2']) {
                            sh "scp -o StrictHostKeyChecking=no payload/ec2-run-ecr-image.sh ${ec2Instance}:/home/ec2-user"
                            sh "ssh -o StrictHostKeyChecking=no ${ec2Instance} ${shellCmd}"
                        }
                    }
                }
            }
        }
        // stage('Commit version update'){
        //     steps {
        //         script {
        //             withCredentials([usernamePassword(credentialsId: 'git-creds', passwordVariable: 'PASS', usernameVariable: 'USER')]){
        //                 sh 'git config --global user.email "jenkins@example.com"'
        //                 sh 'git config --global user.name "jenkins"'

        //                 sh "git remote set-url origin https://${USER}:${PASS}@github.com/hangrybear666/12-devops-bootcamp__terraform.git"
        //                 sh 'git add java-app/pom.xml'
        //                 sh 'git commit -m "ci-cd bot: java-app version bump"'
        //                 sh 'git push origin HEAD:main'
        //             }
        //         }
        //     }
        // }
    }
}

